#!/usr/bin/env python3
# cleanup_problematic_files.py - ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

import os
import shutil

def cleanup_problematic_files():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ gpus parameter ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢"""
    
    files_to_remove = [
        './ai/deep_learning_trainer-old.py',
        './ai/pytorch_lightning_fix.py', 
        './ai/deep_learning_models-old2.py',
        './debug_script.py'  # ‡∏•‡∏ö debug script ‡∏î‡πâ‡∏ß‡∏¢
    ]
    
    print("üßπ CLEANUP: Removing problematic files...")
    print("=" * 50)
    
    for file_path in files_to_remove:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"‚úÖ Removed: {file_path}")
            else:
                print(f"‚ö†Ô∏è  Not found: {file_path}")
        except Exception as e:
            print(f"‚ùå Error removing {file_path}: {e}")
    
    print("\nüîß Keeping necessary files...")
    
    # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏•‡∏ö reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤)
    files_to_check = [
        './ai/reinforcement_learning.py'
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"üìù Check manually: {file_path} (may contain old references)")
    
    print("\n‚úÖ Cleanup completed!")

def backup_current_files():
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    
    files_to_backup = [
        './ai/deep_learning_models.py',
        './backtesting/advanced_backtesting.py'
    ]
    
    print("üíæ BACKUP: Creating backups...")
    
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            backup_path = file_path + '.backup'
            try:
                shutil.copy2(file_path, backup_path)
                print(f"‚úÖ Backed up: {file_path} ‚Üí {backup_path}")
            except Exception as e:
                print(f"‚ùå Backup failed for {file_path}: {e}")

def check_imports():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å"""
    
    main_files = [
        './main.py',
        './ai/__init__.py'
    ]
    
    print("\nüîç CHECKING: Import statements...")
    
    for file_path in main_files:
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            problematic_imports = [
                'deep_learning_trainer-old',
                'pytorch_lightning_fix',
                'deep_learning_models-old2'
            ]
            
            found_issues = []
            for imp in problematic_imports:
                if imp in content:
                    found_issues.append(imp)
            
            if found_issues:
                print(f"‚ö†Ô∏è  {file_path} contains problematic imports: {found_issues}")
            else:
                print(f"‚úÖ {file_path} looks clean")

if __name__ == "__main__":
    print("üöÄ CLEANUP PROBLEMATIC FILES")
    print("=" * 50)
    
    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô
    backup_current_files()
    print()
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    cleanup_problematic_files()
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö imports
    check_imports()
    
    print("\n" + "=" * 50)
    print("üìã NEXT STEPS:")
    print("1. Replace ai/deep_learning_models.py with clean version")
    print("2. Replace backtesting/advanced_backtesting.py with fixed version") 
    print("3. Run: python main.py")
    print("4. No more 'gpus' parameter errors!")
